@using TALKPOLL.Models
@model List<TALKPOLL.Models.SurveyQuestions>
@using Newtonsoft.Json
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/survey.css" asp-append-version="true"/>
    <title>Survey</title>
</head>
<body>
    <nav>
        <ul class="sidebar">
            <li onclick=hideSidebar()><a href="#"><svg class="menu" xmlns="http://www.w3.org/2000/svg" height="26" viewBox="0 -960 960 960" width="26"><path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z"/></svg></a></li>
                <p class="itm-1">SurveyApp</p>
                <li tabindex="0">
                    <a href="../Home/Index">
                        <svg class="icons" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M120-200q-33 0-56.5-23.5T40-280v-400q0-33 23.5-56.5T120-760h400q33 0 56.5 23.5T600-680v400q0 33-23.5 56.5T520-200H120Zm0-80h400v-400H120v400Zm560 80v-560h80v560h-80Zm160 0v-560h80v560h-80Zm-720-80v-400 400Z"/></svg>
                        Home
                    </a>
                </li>
                    <li tabindex="0">
                        <a href="../Dashboard/Index">
                            <svg class="icons" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M120-200q-33 0-56.5-23.5T40-280v-400q0-33 23.5-56.5T120-760h400q33 0 56.5 23.5T600-680v400q0 33-23.5 56.5T520-200H120Zm0-80h400v-400H120v400Zm560 80v-560h80v560h-80Zm160 0v-560h80v560h-80Zm-720-80v-400 400Z"/></svg>
                            General info
                        </a>
                    </li>
                    <li tabindex="0">
                        <a href="../Dashboard/Surveylist">
                            <svg class="icons" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M160-120q-33 0-56.5-23.5T80-200v-560q0-33 23.5-56.5T160-840h640q33 0 56.5 23.5T880-760v560q0 33-23.5 56.5T800-120H160Zm0-80h640v-560H160v560Zm40-80h200v-80H200v80Zm382-80 198-198-57-57-141 142-57-57-56 57 113 113Zm-382-80h200v-80H200v80Zm0-160h200v-80H200v80Zm-40 400v-560 560Z"/></svg>
                            Surveys
                        </a>
                    </li>
                    <li tabindex="0">
                        <a href="#">
                            <svg class="icons" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M480-80q-139-35-229.5-159.5T160-516v-244l320-120 320 120v244q0 152-90.5 276.5T480-80Zm0-84q97-30 162-118.5T718-480H480v-315l-240 90v207q0 7 2 18h238v316Z"/></svg>
                            Security
                        </a>
                    </li>
                    <li tabindex="0">
                        <a href="../About/Index">
                            <svg class="icons" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h280v80H200Zm440-160-55-58 102-102H360v-80h327L585-622l55-58 200 200-200 200Z"/></svg>
                            About Us
                        </a>
                    </li>
                    <li tabindex="0">
                        <a href="#">
                            <svg class="icons" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h280v80H200Zm440-160-55-58 102-102H360v-80h327L585-622l55-58 200 200-200 200Z"/></svg>
                            Contact Us
                        </a>
                    </li>
                    <li tabindex="0">
                        <a href="../Login/Index">
                            <svg class="icons" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h280v80H200Zm440-160-55-58 102-102H360v-80h327L585-622l55-58 200 200-200 200Z"/></svg>
                            Logout
                        </a>
                    </li>

                <div class="cont-us">
                    <h6>Have any problem with how to manage your dashboard?</h6>
                    <div>Contact Us</div>
                </div>

        </ul>
        <ul class="header">
            <li class="appname" ><a href="../Home/Index">SurveyApp</a></li>

            <li class="menu-btn" onclick=showSidebar()>
                <a href="#">
                    <svg class="menu" xmlns="http://www.w3.org/2000/svg" height="26" viewBox="0 -960 960 960" width="26"><path d="M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z"/></svg>
                </a>
            </li>
            
        </ul> 
        <ul class="logging-btns hideOnMobile">
            <li class=" hideOnLogin"><a href="../Login/Index">Sign Out</a></li>
            
        </ul>
    </nav>

    <div class="survey">
        <h2>@ViewBag.Title @ViewBag.Survey<button  id="read-aloud" onclick="readAloud()">Read Aloud</button></h2>
        <div id="questionnaire-form">
             Questions will be dynamically inserted here 
        </div>
        <div class="counter">
            <span id="page-counter">Page 1/3</span>
        </div>
        <div class="navigation">
            <button id="prev" onclick="prevPage()">Prev</button>
            <button id="next" onclick="nextPage()">Next</button>
            <button id="submit" onclick="submitForm()" style="display: none;">Submit</button>
        </div>
    </div> 
    
    
    <script>
            function showSidebar() {
        const sidebar = document.querySelector('.sidebar');
        sidebar.style.display = 'flex';
    
        document.addEventListener('click', closeSidebarOnClickOutside);
    
        const button = document.querySelector('.menu-btn');
        button.addEventListener('click', stopPropagation);
    }
    
    function closeSidebarOnClickOutside(event) {
        const sidebar = document.querySelector('.sidebar');
    
        if (!sidebar.contains(event.target)) {
            sidebar.style.display = 'none';
            document.removeEventListener('click', closeSidebarOnClickOutside);
        }
    }
    
    function stopPropagation(event) {
        event.stopPropagation();
    }
    
            function hideSidebar(){
                const sidebar = document.querySelector('.sidebar')
                sidebar.style.display = 'none'
            }
            function showSubmenu() {
                const submenu = document.querySelector('.sub-menu');
                const smul = document.querySelector('.sm-ul');
                submenu.style.display = 'block';
                smul.style.display = 'block';
    
                document.addEventListener('click', closeSubmenuOnClickOutside);
            }
    
            function closeSubmenuOnClickOutside(event) {
                const submenu = document.querySelector('.sub-menu');
                const button = document.querySelector('.profile-icon');
    
                if (!submenu.contains(event.target) && event.target !== button) {
                   submenu.style.display = 'none';
                   document.removeEventListener('click', closeSubmenuOnClickOutside);
                }
            }
    
            const questions = @Html.Raw(JsonConvert.SerializeObject(
    Model.Select(q => new { 
        questionId = q.questionId, // Include questionId
        type = q.type, 
        question = q.text, 
        options = q.Options.Any() 
            ? q.Options.Select(o => new { optionId = o.optionId, text = o.text }).ToArray() // Include optionId and text
            : null
    }).ToList()));

function updatePage() {
    const formElement = document.getElementById("questionnaire-form");
    formElement.innerHTML = '';

    questions.forEach((questionObj, index) => {
        const questionContainer = document.createElement('div');
        questionContainer.className = 'question-container';

        const questionElement = document.createElement('p');
        questionElement.className = 'question';
        questionElement.textContent = `${index + 1}. ${questionObj.question}`;
        questionContainer.appendChild(questionElement);

        if (questionObj.type === 'text') {
            const textarea = document.createElement('textarea');
            textarea.name = `question-${questionObj.questionId}`; // Use question ID for the name
            questionContainer.appendChild(textarea);

            const recordButton = document.createElement('button');
            recordButton.textContent = 'Record Answer';
            recordButton.onclick = () => startRecording(questionObj.questionId); // Pass question ID
            questionContainer.appendChild(recordButton);

        } else if (questionObj.type === 'radio') {
            questionObj.options.forEach(option => {
                const label = document.createElement('label');
                const radio = document.createElement('input');
                radio.type = 'radio';
                radio.name = `question-${questionObj.questionId}`; // Use question ID for the name
                radio.value = option.optionId; // Set value to option ID
                label.appendChild(radio);
                label.appendChild(document.createTextNode(option.text));
                questionContainer.appendChild(label);
                questionContainer.appendChild(document.createElement('br'));
            });
        } else if (questionObj.type === 'checkbox') {
            questionObj.options.forEach(option => {
                const label = document.createElement('label');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.name = `question-${questionObj.questionId}`; // Use question ID for the name
                checkbox.value = option.optionId; // Set value to option ID
                label.appendChild(checkbox);
                label.appendChild(document.createTextNode(option.text));
                questionContainer.appendChild(label);
                questionContainer.appendChild(document.createElement('br'));
            });
        }

        formElement.appendChild(questionContainer);
    });

    // Hide pagination buttons since all questions are on one page
    document.getElementById("prev").style.display = 'none';
    document.getElementById("next").style.display = 'none';
    document.getElementById("submit").style.display = 'inline';
}

// Call updatePage once to render all questions
updatePage();


    
            function submitForm() {
    const formData = [];

    questions.forEach((questionObj, index) => {
        const questionId = `question-${index}`;
        const questionType = questionObj.type;
        let answer;

        if (questionType === 'text') {
            // Collect the text input value
            const textarea = document.querySelector(`textarea[name="${questionId}"]`);
            answer = textarea ? textarea.value : '';
        } else if (questionType === 'radio') {
            // Collect the selected radio button value (option id)
            const selectedOption = document.querySelector(`input[name="${questionId}"]:checked`);
            answer = selectedOption ? selectedOption.value : '';
        } else if (questionType === 'checkbox') {
            // Collect all selected checkbox values (option ids)
            const selectedOptions = document.querySelectorAll(`input[name="${questionId}"]:checked`);
            answer = Array.from(selectedOptions).map(option => option.value);
        }

        formData.push({
            questionId: questionObj.id, // Assuming `questionObj` contains an `id` property
            answer: Array.isArray(answer) ? answer : [answer] // Ensure answer is an array
        });
    });

    console.log('Form Data:', formData);

    // You can then submit this data via an AJAX request or form submission
    fetch('/api/response/submit', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => {
        if (response.ok) {
            alert('Survey submitted successfully!');
        } else {
            throw new Error('Submission failed');
        }
    })
    .catch(error => {
        console.error('There was a problem with the submission:', error);
    });
}

    
            
    function readAloud() {
        const allQuestions = questions.map((questionObj, index) => {
            let questionText = `${index + 1}. ${questionObj.question}`;
            if (questionObj.options) {
                questionText += ' ' + questionObj.options.join(', ');
            }
            return questionText;
        }).join('. ');

        const data = {
            Text: allQuestions
        };

        fetch('/api/tts/speak', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (response.ok) {
                return response.blob();
            }
            throw new Error('Network response was not ok.');
        })
        .then(blob => {
            const url = URL.createObjectURL(blob);
            const audio = new Audio(url);
            audio.play();
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    }

    async function startRecording(questionIndex) {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            const mediaRecorder = new MediaRecorder(stream);
            const recordedChunks = [];

            mediaRecorder.ondataavailable = event => {
                if (event.data.size > 0) {
                    recordedChunks.push(event.data);
                }
            };

            mediaRecorder.onstop = async () => {
                const audioBlob = new Blob(recordedChunks, { type: 'audio/mpeg' });
                await transcribeAudio(audioBlob, questionIndex);
            };

            mediaRecorder.start();
            setTimeout(() => {
                mediaRecorder.stop();
            }, 5000); // Stop recording after 5 seconds
        }

        async function transcribeAudio(audioBlob, questionIndex) {
            const formData = new FormData();
            formData.append('audio', audioBlob);

            const response = await fetch('/api/transcription/transcribe', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                const result = await response.json();
                document.getElementById(`question-${questionIndex}`).value = result.transcription;
            } else {
                console.error('Transcription failed:', response.statusText);
            }
        }
        </script> 
</body>
</html>